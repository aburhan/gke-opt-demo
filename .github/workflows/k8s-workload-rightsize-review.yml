name: K8s Workload Rightsizing Review Pull Request

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review-deployment:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Dump github context
      run: echo '${{ toJSON(github.event) }}' | jq
      shell: bash

    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Request Changes
      uses: actions/github-script@v7
      with:
        script: |
          const pullRequestNumber = context.payload.pull_request.number;
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const body = '
          name: Update PR with Resource Recommendations

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  post-resource-recommendations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Post Resource Recommendations to PR
        uses: actions/github-script@v7
        with:
          script: |
            const github = require('@actions/github');
            const core = require('@actions/core');
            const prNumber = github.context.issue.number;
            const owner = github.context.repo.owner;
            const repo = github.context.repo.repo;

            const message = `
We've identified critical reliability risks for the \`checkoutservice\` Deployment's \`server\` container due to the current resource settings not being aligned with actual usage patterns. This misalignment could lead to potential instability and performance bottlenecks.

### 30-Day Usage Review:
- **Maximum Memory Usage:** 11.11 MiB
- **Maximum CPU Usage:** 8.41 mCores

### Rightsizing Recommendations:
To ensure optimal performance and reliability, it's crucial to adjust the resource requests and limits as detailed below:

\`\`\`yaml
resources:
  requests:
    memory: "15Mi"
    cpu: "16m"
  limits:
    memory: "15Mi"
    cpu: "40m"
\`\`\`

**Location for Update:** \`deployment.yaml\` within the \`checkoutservice\` Deployment configuration.

### GCP Instance Type Suggestion:
Considering the deployment's nature and the \`docker.io/qdrant/qdrant:v1.7.4\` image specifics, we advise opting for a memory-optimized instance type, such as \`e2-highmem-4\`. This choice caters to the workload's memory demands, ensuring efficiency and performance are maintained during peak operation times.

### Evaluation of Current Resource Utilization:
The analysis shows CPU resources are currently underutilized, while memory usage closely matches the existing requests. By adjusting the resources to the recommended settings, not only can we improve the deployment's reliability, but there's also a potential for cost savings by optimizing resource allocation.

**Action:** Please proceed to update the resource allocations in the specified YAML file to align with our recommendations. This adjustment is a critical step toward enhancing the stability and efficiency of the \`checkoutservice\` deployment.

Commit these changes to a dedicated branch and initiate a pull request for thorough review and subsequent deployment adjustments.
            `.trim();
          ';
          const event = 'REQUEST_CHANGES';
          await github.rest.pulls.createReview({
            owner,
            repo,
            pull_number: pullRequestNumber,
            body,
            event,
          });
        github-token: ${{secrets.GITHUB_TOKEN}}
